using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Schema;

namespace Weatherman.Yahoo
{

    /* SALYH 12/10
     * YAHOO WEATHER DATA
     * This class holds data gathered from the Yahoo Weather API.
     * It's based on a Java module I wrote in June.
     */

    class YahooWeatherData
    {

        #region Variables & Constants
     
        // The API request, sans desired city. Append a WOEID to this URL to make it a valid request
	    private static readonly string URL_BASE = @"http://weather.yahooapis.com/forecastrss?w=";

        // The namespace of the XML document generated by API requests
        private static readonly string XMLNS = @"http://xml.weather.yahoo.com/ns/rss/1.0";

        private Astronomy           myAstronomy;

        /* private Location         myLocation;
        private Units               myUnits;
        private Weather             myWeather;
        private Astronomy           myAstronomy;
        private Atmosphere          myAtmosphere;
        private Wind                myWind;
        private FiveDayForecast     myForecast;*/

        #endregion

        #region Constructor
        /** 
         * CONSTRUCTOR. 
         * Requires a WOEID for the desired location. WOEID is a proprietary location
         * format developed by Yahoo. Each place on Earth has a unique WOEID.
         * For more information, see https://developer.yahoo.com/geo/geoplanet/guide/concepts.html
         * To lookup the WOEID of a place, use http://woeid.rosselliot.co.nz/
         */ 
        public YahooWeatherData( int WOEID)
        {
            try
            {
                /* First, connect to the Yahoo Weather API and retrieve
                 * an XML Document that contains all the weather data.
                 */
                gatherXMLData(WOEID);
            } 
            catch (Exception connectionIssue)
            {
                /* If the URL request is malformed, or the user's computer cannot 
                 * connect to the Yahoo Weather API, handle the failed connection.
                 * This is within normal operating conditions, so it cannot be allowed
                 * to throw an exception!
                 */
                handleFailedConnection(connectionIssue);
            }
        }

        #endregion

        #region Getters & Setters
	    // These GETTERS allow access to the weather data. The data is READ ONLY. 
/*
        public Location         getLocation() {     return myLocation;      }
        public Units            getUnits() {        return myUnits;         }
        public Weather          getWeather() {      return myWeather;       }
        public Astronomy        getAstronomy() {    return myAstronomy;     }
        public Atmosphere       getAtmosphere() {   return myAtmosphere;    }
        public Wind             getWind() {         return myWind;          }
        public FiveDayForecast  getForecast() {     return myForecast;      }
  */

        #endregion

        #region Connection & XML Methods

        /* GATHER XML DATA
	     * Take a Yahoo WOEID, and gather the information from it.
	     * That information is saved into private objects contained within this
	     * class. 
	     */
        private void gatherXMLData( int WOEID)
        {
            /* First, connect to the Yahoo Weather API, and
             * load an XML document containing the weather information.
             * The request URL is based on the WOEID.
             */
            string query = String.Format(URL_BASE + WOEID);
            XmlDocument wData = new XmlDocument();
            wData.Load(query);
         
            /* Then, add the correct namespace into the manager */
            XmlNamespaceManager manager = new XmlNamespaceManager(wData.NameTable);
            manager.AddNamespace("yweather", XMLNS);

            // All of the relevant data is contained within this channel.
            XmlNode channel = wData.SelectSingleNode("rss").SelectSingleNode("channel");

            myAstronomy = new Astronomy( channel, manager);
            System.Console.WriteLine(myAstronomy.sunrise);

            // TODO: Use specialized objects to hold all of the relevant data.


            /*XmlNodeList nodes = wData.SelectNodes("/rss/channel/item/yweather:forecast", manager);

            string Temp = channel.SelectSingleNode("item").SelectSingleNode("yweather:condition", manager).Attributes["temp"].Value;
            string Condition = channel.SelectSingleNode("item").SelectSingleNode("yweather:condition", manager).Attributes["text"].Value;
            string Humidity = channel.SelectSingleNode("yweather:atmosphere", manager).Attributes["humidity"].Value;
            string WindSpeed = channel.SelectSingleNode("yweather:wind", manager).Attributes["speed"].Value;
            string Town = channel.SelectSingleNode("yweather:location", manager).Attributes["city"].Value;
            string TFCond = channel.SelectSingleNode("item").SelectSingleNode("yweather:forecast", manager).Attributes["text"].Value;
            string TFHigh = channel.SelectSingleNode("item").SelectSingleNode("yweather:forecast", manager).Attributes["high"].Value;
            string TFLow = channel.SelectSingleNode("item").SelectSingleNode("yweather:forecast", manager).Attributes["low"].Value;
            
            System.Console.Write(Town);*/
        }



        /*	HANDLE BAD XML	
	     *	This method is called if the XML document has an issue. For example, an
	     *	invalid city.
	     */
        private void handleFailedConnection(Exception e)
        {
            // TODO: Write handleFailedConnection method
            Console.WriteLine("Failed to connect to the Yahoo Weather API. Is your WOEID is valid?");
        }


        // --------------------------------------------------------------------------------------
        // --------------------------------------------------------------------------------------
        #endregion


    }
}
